#!/usr/bin/env python3
"""
Create sample data for modern ecommerce site with API service
"""

import os
import sys
import django
from decimal import Decimal

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bluewave_ecommerce.settings')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
django.setup()

from products.models import Category, Product
from accounts.models import User


def create_ecommerce_data():
    print("üõçÔ∏è Creating modern ecommerce data...")
    
    # Create Categories
    print("\nüìÇ Creating categories...")
    
    electronics = Category.objects.get_or_create(
        name="Electronics",
        slug="electronics",
        defaults={
            'description': 'Latest smartphones, laptops, tablets and tech accessories',
            'category_type': 'hardware'
        }
    )[0]
    
    fashion = Category.objects.get_or_create(
        name="Fashion & Clothing", 
        slug="fashion-clothing",
        defaults={
            'description': 'Trendy clothes, shoes, and fashion accessories',
            'category_type': 'hardware'
        }
    )[0]
    
    home_garden = Category.objects.get_or_create(
        name="Home & Garden",
        slug="home-garden",
        defaults={
            'description': 'Home decor, furniture, garden tools and supplies',
            'category_type': 'hardware'
        }
    )[0]
    
    books = Category.objects.get_or_create(
        name="Books & Media",
        slug="books-media",
        defaults={
            'description': 'Books, audiobooks, movies and digital media',
            'category_type': 'service'
        }
    )[0]
    
    api_services = Category.objects.get_or_create(
        name="API Services",
        slug="api-services",
        defaults={
            'description': 'Developer API access plans and data services',
            'category_type': 'subscription'
        }
    )[0]
    
    print(f"‚úÖ Created {Category.objects.count()} categories")
    
    # Create Electronics Products
    print("\nüì± Creating electronics products...")
    
    smartphone = Product.objects.get_or_create(
        name="iPhone 15 Pro Max",
        slug="iphone-15-pro-max",
        defaults={
            'description': '''The most advanced iPhone ever. The iPhone 15 Pro Max features:

‚Ä¢ 6.7-inch Super Retina XDR display with ProMotion
‚Ä¢ A17 Pro chip with 6-core GPU for incredible performance
‚Ä¢ Pro camera system with 48MP Main, Ultra Wide, and Telephoto cameras
‚Ä¢ Action button for quick access to your favorite features
‚Ä¢ USB-C connector for universal charging
‚Ä¢ Titanium design for durability and lightweight feel
‚Ä¢ Up to 29 hours of video playback

Available in Natural Titanium, Blue Titanium, White Titanium, and Black Titanium.

What's in the box:
‚Ä¢ iPhone 15 Pro Max
‚Ä¢ USB-C to USB-C Cable
‚Ä¢ Documentation

Perfect for photography enthusiasts, professionals, and anyone who wants the best mobile technology available.''',
            'short_description': 'Latest iPhone with titanium design, A17 Pro chip, and advanced camera system',
            'product_type': 'desalination_unit',  # Reusing existing choices
            'category': electronics,
            'price': Decimal('1199.99'),
            'compare_at_price': Decimal('1299.99'),
            'sku': 'APPLE-IPH15PM-128GB',
            'stock_quantity': 50,
            'status': 'active',
            'is_featured': True
        }
    )[0]
    
    laptop = Product.objects.get_or_create(
        name="MacBook Air M2",
        slug="macbook-air-m2",
        defaults={
            'description': '''Redesigned around the next-generation M2 chip, MacBook Air is strikingly thin and brings exceptional speed and power efficiency within an incredibly portable design.

Key Features:
‚Ä¢ M2 chip with 8-core CPU and up to 10-core GPU
‚Ä¢ 13.6-inch Liquid Retina display with 500 nits of brightness
‚Ä¢ 1080p FaceTime HD camera
‚Ä¢ Four-speaker sound system with Spatial Audio
‚Ä¢ Up to 18 hours of battery life
‚Ä¢ 8GB unified memory, 256GB SSD storage
‚Ä¢ Two Thunderbolt ports, headphone jack, MagSafe charging
‚Ä¢ Backlit Magic Keyboard and Touch ID

Available in Midnight, Starlight, Silver, and Space Gray.

Perfect for students, professionals, and creatives who need powerful performance in a lightweight package.''',
            'short_description': 'Ultra-thin laptop with M2 chip, 13.6" Retina display, and all-day battery',
            'product_type': 'desalination_unit',
            'category': electronics,
            'price': Decimal('1099.99'),
            'compare_at_price': Decimal('1199.99'),
            'sku': 'APPLE-MBA-M2-256GB',
            'stock_quantity': 25,
            'status': 'active',
            'is_featured': True
        }
    )[0]
    
    headphones = Product.objects.get_or_create(
        name="AirPods Pro (2nd Gen)",
        slug="airpods-pro-2nd-gen",
        defaults={
            'description': '''AirPods Pro (2nd generation) feature richer audio experiences. So you can lose yourself in music and podcasts, and get on calls with crystal-clear sound.

Advanced Features:
‚Ä¢ Active Noise Cancellation reduces unwanted background noise
‚Ä¢ Adaptive Transparency lets outside sounds in while reducing loud environmental noise
‚Ä¢ Personalized Spatial Audio with dynamic head tracking
‚Ä¢ Multiple ear tips (XS, S, M, L) for a customizable fit
‚Ä¢ Touch control lets you swipe to adjust volume
‚Ä¢ Up to 6 hours of listening time with ANC enabled
‚Ä¢ Up to 30 hours total listening time with MagSafe Charging Case
‚Ä¢ Sweat and water resistant (IPX4)

What's included:
‚Ä¢ AirPods Pro
‚Ä¢ MagSafe Charging Case
‚Ä¢ Silicone ear tips (4 sizes)
‚Ä¢ Lightning to USB-C Cable
‚Ä¢ Documentation''',
            'short_description': 'Premium wireless earbuds with active noise cancellation and spatial audio',
            'product_type': 'desalination_unit',
            'category': electronics,
            'price': Decimal('249.99'),
            'sku': 'APPLE-APP-2ND-GEN',
            'stock_quantity': 100,
            'status': 'active',
            'is_featured': True
        }
    )[0]
    
    # Fashion Products
    print("\nüëï Creating fashion products...")
    
    sneakers = Product.objects.get_or_create(
        name="Nike Air Max 270",
        slug="nike-air-max-270",
        defaults={
            'description': '''The Nike Air Max 270 delivers visible comfort with the largest Max Air unit yet, offering a super-soft ride that feels as impossible as it looks.

Features:
‚Ä¢ Nike's biggest heel Max Air unit yet delivers soft, all-day comfort
‚Ä¢ Engineered mesh upper is lightweight and breathable
‚Ä¢ Foam midsole feels soft and comfortable
‚Ä¢ Rubber outsole with waffle-inspired pattern adds traction and durability
‚Ä¢ Pull tabs on tongue and heel for easy on and off

Available in multiple colorways including:
‚Ä¢ Black/White/Solar Red
‚Ä¢ Triple Black
‚Ä¢ White/Black/Total Orange
‚Ä¢ Navy/Wolf Grey/White

Perfect for everyday wear, casual outings, or light athletic activities.
Runs true to size for most people.''',
            'short_description': 'Iconic sneakers with maximum air cushioning for all-day comfort',
            'product_type': 'desalination_unit',
            'category': fashion,
            'price': Decimal('150.00'),
            'compare_at_price': Decimal('170.00'),
            'sku': 'NIKE-AM270-BLK-10',
            'stock_quantity': 75,
            'status': 'active'
        }
    )[0]
    
    jacket = Product.objects.get_or_create(
        name="Levi's Trucker Jacket",
        slug="levis-trucker-jacket",
        defaults={
            'description': '''The classic denim jacket that started it all. Levi's Trucker Jacket is an iconic piece that never goes out of style.

Details:
‚Ä¢ 100% cotton denim construction
‚Ä¢ Classic point collar and button front closure  
‚Ä¢ Two chest pockets with button flaps
‚Ä¢ Two side entry pockets
‚Ä¢ Adjustable button tabs at waist
‚Ä¢ Rigid denim that will soften and fade beautifully over time
‚Ä¢ Machine washable

Available sizes: XS, S, M, L, XL, XXL
Available washes:
‚Ä¢ Dark Stonewash
‚Ä¢ Medium Stonewash  
‚Ä¢ Light Stonewash
‚Ä¢ Black

The perfect layering piece that works with everything in your wardrobe. From casual weekend looks to smart-casual office attire.''',
            'short_description': 'Timeless denim jacket in classic trucker style, perfect for layering',
            'product_type': 'desalination_unit',
            'category': fashion,
            'price': Decimal('79.99'),
            'sku': 'LEVIS-TRUCK-DARK-M',
            'stock_quantity': 60,
            'status': 'active'
        }
    )[0]
    
    # Home & Garden Products  
    print("\nüè† Creating home & garden products...")
    
    coffee_maker = Product.objects.get_or_create(
        name="Ninja Specialty Coffee Maker",
        slug="ninja-specialty-coffee-maker",
        defaults={
            'description': '''The Ninja Specialty Coffee Maker brews super-rich coffee concentrate that you can use to create delicious coffeehouse-style drinks.

Features:
‚Ä¢ 6 brew sizes: Cup, Travel, XL Cup, XL Travel, XL Multi-Serve, Carafe
‚Ä¢ 5 brew styles: Classic, Rich, Over Ice, Cold Brew, Specialty Concentrate
‚Ä¢ Built-in frother creates silky-smooth hot or cold foam
‚Ä¢ Fold-away frother tucks away to save space
‚Ä¢ Removable water reservoir holds up to 50 oz.
‚Ä¢ Permanent filter included - no paper filters needed
‚Ä¢ Auto-iQ one-touch intelligence
‚Ä¢ Dishwasher-safe parts for easy cleanup

What's Included:
‚Ä¢ Ninja Specialty Coffee Maker
‚Ä¢ 50 oz. Water Reservoir
‚Ä¢ 10-Cup Glass Carafe
‚Ä¢ Ninja Hot & Cold 18 oz. Tumbler
‚Ä¢ Permanent Filter
‚Ä¢ Frothing Whisk
‚Ä¢ Scoop & Recipe Guide

Perfect for coffee enthusiasts who want caf√©-quality drinks at home.''',
            'short_description': 'Versatile coffee maker with built-in frother for caf√©-style drinks at home',
            'product_type': 'desalination_unit',
            'category': home_garden,
            'price': Decimal('179.99'),
            'compare_at_price': Decimal('199.99'),
            'sku': 'NINJA-SCM-CM401',
            'stock_quantity': 30,
            'status': 'active'
        }
    )[0]
    
    # API Service Products
    print("\nüîå Creating API service products...")
    
    basic_api = Product.objects.get_or_create(
        name="Basic API Access",
        slug="basic-api-access",
        defaults={
            'description': '''Get started with our API services. Perfect for developers and small projects.

What's Included:
‚Ä¢ 10,000 API calls per month
‚Ä¢ Basic endpoints access
‚Ä¢ Standard rate limiting
‚Ä¢ Email support
‚Ä¢ API documentation access
‚Ä¢ Basic analytics dashboard
‚Ä¢ 99.9% uptime SLA

Supported Endpoints:
‚Ä¢ User management
‚Ä¢ Product data
‚Ä¢ Order processing  
‚Ä¢ Basic analytics
‚Ä¢ Webhook notifications

Perfect for:
‚Ä¢ Individual developers
‚Ä¢ Small projects
‚Ä¢ Testing and prototyping
‚Ä¢ Learning API integration

Generate your API tokens directly from your dashboard after purchase.
Tokens can be configured with custom expiry times up to 1 year.''',
            'short_description': 'Entry-level API access with 10K calls/month and basic endpoints',
            'product_type': 'data_subscription',
            'category': api_services,
            'price': Decimal('29.99'),
            'sku': 'API-BASIC-MONTHLY',
            'status': 'active',
            'is_featured': True
        }
    )[0]
    
    pro_api = Product.objects.get_or_create(
        name="Professional API Access", 
        slug="professional-api-access",
        defaults={
            'description': '''Advanced API access for growing businesses and professional developers.

What's Included:
‚Ä¢ 100,000 API calls per month
‚Ä¢ All endpoints access
‚Ä¢ Priority rate limiting
‚Ä¢ Priority email & chat support
‚Ä¢ Advanced analytics dashboard
‚Ä¢ Custom webhooks
‚Ä¢ 99.95% uptime SLA
‚Ä¢ Advanced authentication options

Supported Endpoints:
‚Ä¢ Complete user management
‚Ä¢ Full product catalog access
‚Ä¢ Advanced order management
‚Ä¢ Detailed analytics & reporting
‚Ä¢ Custom webhook configurations
‚Ä¢ Bulk operations
‚Ä¢ Real-time notifications

Perfect for:
‚Ä¢ Growing businesses
‚Ä¢ E-commerce integrations
‚Ä¢ Mobile app backends
‚Ä¢ Third-party integrations
‚Ä¢ Production applications

Generate unlimited API tokens with custom expiry times.
Advanced token management with scoped permissions.''',
            'short_description': 'Professional API access with 100K calls/month and advanced features',
            'product_type': 'data_subscription', 
            'category': api_services,
            'price': Decimal('199.99'),
            'sku': 'API-PRO-MONTHLY',
            'status': 'active',
            'is_featured': True
        }
    )[0]
    
    enterprise_api = Product.objects.get_or_create(
        name="Enterprise API Access",
        slug="enterprise-api-access", 
        defaults={
            'description': '''Enterprise-grade API solution for large-scale applications and businesses.

What's Included:
‚Ä¢ 1,000,000 API calls per month
‚Ä¢ Complete API access
‚Ä¢ No rate limiting
‚Ä¢ Dedicated account manager
‚Ä¢ 24/7 phone & chat support
‚Ä¢ Custom SLA options (up to 99.99%)
‚Ä¢ Advanced security features
‚Ä¢ Custom endpoint development
‚Ä¢ White-label options available

Enterprise Features:
‚Ä¢ Custom authentication methods
‚Ä¢ IP whitelisting
‚Ä¢ Advanced monitoring & alerts
‚Ä¢ Custom data exports
‚Ä¢ Priority feature requests
‚Ä¢ Direct developer access
‚Ä¢ On-premise deployment options

Perfect for:
‚Ä¢ Large enterprises
‚Ä¢ High-traffic applications
‚Ä¢ Mission-critical systems
‚Ä¢ Custom integrations
‚Ä¢ Reseller partnerships

Includes dedicated support for API token architecture and security implementation.''',
            'short_description': 'Enterprise API solution with 1M calls/month and dedicated support',
            'product_type': 'data_subscription',
            'category': api_services, 
            'price': Decimal('999.99'),
            'sku': 'API-ENT-MONTHLY',
            'status': 'active'
        }
    )[0]
    
    print(f"‚úÖ Created {Product.objects.count()} products")
    
    # Create sample users
    print("\nüë§ Creating sample users...")
    
    # Keep existing admin user
    admin_user = User.objects.filter(email='admin@bluewave.com').first()
    if admin_user:
        print("‚úÖ Admin user already exists")
    
    # Create/update customer user
    customer, created = User.objects.get_or_create(
        email='customer@example.com',
        defaults={
            'first_name': 'John',
            'last_name': 'Doe',
            'user_type': 'customer',
            'is_active': True
        }
    )
    if created:
        customer.set_password('demo123')
        customer.save()
        print("‚úÖ Created customer@example.com / demo123")
    else:
        print("‚úÖ Customer account already exists")
    
    # Create developer user
    developer, created = User.objects.get_or_create(
        email='developer@example.com',
        defaults={
            'first_name': 'Jane',
            'last_name': 'Smith',
            'user_type': 'customer', 
            'is_active': True
        }
    )
    if created:
        developer.set_password('dev123')
        developer.save()
        print("‚úÖ Created developer@example.com / dev123")
    else:
        print("‚úÖ Developer account already exists")
    
    print(f"\nüéâ Modern ecommerce data creation complete!")
    print(f"üìä Total products: {Product.objects.count()}")
    print(f"üìÇ Total categories: {Category.objects.count()}")
    print(f"üõçÔ∏è Physical products: {Product.objects.filter(product_type='desalination_unit').count()}")
    print(f"üîå API services: {Product.objects.filter(product_type='data_subscription').count()}")
    
    print(f"\nüîë Login credentials:")
    print(f"Admin: admin@bluewave.com / admin123")
    print(f"Customer: customer@example.com / demo123") 
    print(f"Developer: developer@example.com / dev123")
    
    print(f"\nüåê Visit your site:")
    print(f"‚Ä¢ Homepage: http://localhost:8000/")
    print(f"‚Ä¢ Products: http://localhost:8000/products/")
    print(f"‚Ä¢ Admin: http://localhost:8000/admin/")
    print(f"‚Ä¢ API Docs: http://localhost:8000/api/docs/ (coming soon)")

if __name__ == '__main__':
    create_ecommerce_data()