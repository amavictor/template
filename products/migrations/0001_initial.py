# Generated by Django 5.2.6 on 2025-09-04 21:55

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('category_type', models.CharField(choices=[('hardware', 'Hardware Products'), ('subscription', 'Data Subscriptions'), ('service', 'Services')], default='hardware', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'products_category',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, max_length=255)),
                ('product_type', models.CharField(choices=[('desalination_unit', 'Desalination Unit'), ('data_subscription', 'Data Subscription'), ('service', 'Service')], max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('compare_at_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('sku', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('stock_quantity', models.IntegerField(default=0)),
                ('low_stock_threshold', models.IntegerField(default=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('inactive', 'Inactive'), ('out_of_stock', 'Out of Stock')], default='draft', max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('meta_title', models.CharField(blank=True, max_length=60)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'products_product',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnvironmentalMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('water_saved', 'Water Saved'), ('energy_efficiency', 'Energy Efficiency'), ('carbon_footprint', 'Carbon Footprint Reduction'), ('plastic_waste', 'Plastic Waste Prevented'), ('community_impact', 'Community Impact')], max_length=30)),
                ('value', models.FloatField()),
                ('unit', models.CharField(help_text='e.g., liters/day, kWh, kg CO2', max_length=50)),
                ('description', models.TextField(blank=True)),
                ('is_displayed', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='environmental_metrics', to='products.product')),
            ],
            options={
                'verbose_name': 'Environmental Metric',
                'verbose_name_plural': 'Environmental Metrics',
                'db_table': 'products_environmentalmetric',
                'ordering': ['display_order'],
            },
        ),
        migrations.CreateModel(
            name='DesalinationUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('water_output_per_day', models.FloatField(help_text='Water output in liters per day', validators=[django.core.validators.MinValueValidator(0)])),
                ('power_consumption', models.FloatField(help_text='Power consumption in watts', validators=[django.core.validators.MinValueValidator(0)])),
                ('unit_size', models.CharField(choices=[('compact', 'Compact (Personal Use)'), ('medium', 'Medium (Small Business)'), ('large', 'Large (Industrial)')], max_length=20)),
                ('power_source', models.CharField(choices=[('solar', 'Solar Powered'), ('hybrid', 'Hybrid (Solar + Battery)'), ('grid', 'Grid Connected')], max_length=20)),
                ('dimensions', models.CharField(help_text='L x W x H in cm', max_length=100)),
                ('weight', models.FloatField(help_text='Weight in kg', validators=[django.core.validators.MinValueValidator(0)])),
                ('operating_temperature_min', models.IntegerField(default=-10)),
                ('operating_temperature_max', models.IntegerField(default=60)),
                ('salt_rejection_rate', models.FloatField(help_text='Salt rejection rate as percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('has_iot_monitoring', models.BooleanField(default=True)),
                ('has_remote_control', models.BooleanField(default=False)),
                ('warranty_years', models.IntegerField(default=2)),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='desalination_unit', to='products.product')),
            ],
            options={
                'verbose_name': 'Desalination Unit',
                'verbose_name_plural': 'Desalination Units',
                'db_table': 'products_desalinationunit',
            },
        ),
        migrations.CreateModel(
            name='DataSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_type', models.CharField(choices=[('basic', 'Basic Access'), ('professional', 'Professional Access'), ('enterprise', 'Enterprise Access')], max_length=20)),
                ('billing_cycle', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], default='monthly', max_length=20)),
                ('includes_environmental_data', models.BooleanField(default=True)),
                ('includes_historical_data', models.BooleanField(default=False)),
                ('includes_raw_telemetry', models.BooleanField(default=False)),
                ('includes_predictive_analytics', models.BooleanField(default=False)),
                ('api_calls_per_month', models.IntegerField(default=1000, help_text='Number of API calls allowed per month')),
                ('data_retention_months', models.IntegerField(default=12, help_text='How long data is retained in months')),
                ('concurrent_connections', models.IntegerField(default=1, help_text='Number of concurrent API connections allowed')),
                ('has_real_time_alerts', models.BooleanField(default=False)),
                ('has_custom_dashboards', models.BooleanField(default=False)),
                ('has_data_export', models.BooleanField(default=True)),
                ('has_api_access', models.BooleanField(default=True)),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='data_subscription', to='products.product')),
            ],
            options={
                'verbose_name': 'Data Subscription',
                'verbose_name_plural': 'Data Subscriptions',
                'db_table': 'products_datasubscription',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/gallery/')),
                ('alt_text', models.CharField(blank=True, max_length=200)),
                ('is_primary', models.BooleanField(default=False)),
                ('sort_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'db_table': 'products_productimage',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(blank=True, max_length=200)),
                ('comment', models.TextField()),
                ('is_approved', models.BooleanField(default=False)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'db_table': 'products_review',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'product_type'], name='products_pr_status_873e9e_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'status'], name='products_pr_categor_75eeb5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('product', 'user')},
        ),
    ]
